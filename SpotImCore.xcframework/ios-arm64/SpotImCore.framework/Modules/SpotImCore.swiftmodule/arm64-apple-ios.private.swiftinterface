// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SpotImCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVKit
import AdSupport
import Dispatch
import Foundation
import MobileCoreServices
import RxCocoa
import RxSwift
import SafariServices
@_exported import SpotImCore
import Swift
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
import os.log
import os
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class OWBaseView : UIKit.UIView {
  @available(*, unavailable, message: "Loading this view from a nib is unsupported in this project")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum OWInitialSortStrategy {
  case useServerConfig
  case use(sortOption: SpotImCore.OWSortOption)
}
public protocol OWImagePickerDelegate : AnyObject {
  func didSelect(image: UIKit.UIImage?)
}
public enum OWThemeStyle {
  case light
  case dark
  public static func == (a: SpotImCore.OWThemeStyle, b: SpotImCore.OWThemeStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct InputConfiguration {
  public init(appLanguage: Swift.String)
}
public enum OWLocaleStrategy {
  case useDevice
  case useServerConfig
  case use(locale: Foundation.Locale)
}
public struct OWEmptyParser {
}
public struct OWJSONParser {
}
extension SpotImCore.OWLocaleStrategy : Swift.Equatable {
  public static func == (lhs: SpotImCore.OWLocaleStrategy, rhs: SpotImCore.OWLocaleStrategy) -> Swift.Bool
}
public protocol OWUIViews {
  func preConversation(postId: SpotImCore.OWPostId, article: SpotImCore.OWArticleProtocol, additionalSettings: SpotImCore.OWPreConversationSettingsProtocol?, callbacks: SpotImCore.OWViewActionsCallbacks?, completion: @escaping SpotImCore.OWViewCompletion)
  func conversation(postId: SpotImCore.OWPostId, article: SpotImCore.OWArticleProtocol, additionalSettings: SpotImCore.OWConversationSettingsProtocol?, callbacks: SpotImCore.OWViewActionsCallbacks?, completion: @escaping SpotImCore.OWViewCompletion)
}
public enum SPNetworkError : Swift.Error {
  case custom(_: Swift.String)
  case `default`
  case emptyResponse
  case noInternet
  case requestFailed
  case missingStatusCode
}
extension SpotImCore.SPNetworkError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension SpotImCore.SPNetworkError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
}
public typealias OWViewActionsCallbacks = (SpotImCore.OWViewActionCallbackType, SpotImCore.OWViewSourceType, Swift.String) -> Swift.Void
@_hasMissingDesignatedInitializers final public class SPPublicSessionInterface {
  public static func isMe(userId: Swift.String) -> Swift.Bool
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let userDisplayNameFrozen: Foundation.Notification.Name
}
public protocol OWUI {
  var flows: SpotImCore.OWUIFlows { get }
  var views: SpotImCore.OWUIViews { get }
  var customizations: SpotImCore.OWCustomizations { get }
  var authenticationUI: SpotImCore.OWUIAuthentication { get }
}
public struct OWConversationSettingsBuilder : SpotImCore.OWConversationSettingsProtocol {
  public var selectedCommentId: Swift.String?
  public var style: SpotImCore.OWConversationStyle
  public init(style: SpotImCore.OWConversationStyle = .regular, selectedCommentId: Swift.String? = nil)
  @discardableResult
  public mutating func selectedCommentId(_ id: Swift.String?) -> SpotImCore.OWConversationSettingsBuilder
  @discardableResult
  public mutating func style(_ style: SpotImCore.OWConversationStyle) -> SpotImCore.OWConversationSettingsBuilder
}
public typealias OWAuthenticationFlowCallback = (SpotImCore.OWRouteringMode, @escaping SpotImCore.OWBasicCompletion) -> Swift.Void
public enum OWConversationStyle : Swift.Codable {
  case regular
  case compact
  case custom(communityGuidelinesStyle: SpotImCore.OWCommunityGuidelinesStyle, communityQuestionsStyle: SpotImCore.OWCommunityQuestionsStyle, spacing: SpotImCore.OWConversationSpacing)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias OWDefaultCompletion = (Swift.Result<Swift.Void, SpotImCore.OWError>) -> Swift.Void
public struct OWConversationCounter {
  public let commentsNumber: Swift.Int
  public let repliesNumber: Swift.Int
}
public enum OWReadOnlyMode {
  case `default`
  case enable
  case disable
  public static func == (a: SpotImCore.OWReadOnlyMode, b: SpotImCore.OWReadOnlyMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias OWProviderSSOHandler = (Swift.Result<SpotImCore.OWSSOProviderModel, SpotImCore.OWError>) -> Swift.Void
public enum SPEventType : Swift.String {
  case loaded
  case viewed
  case mainViewed
  case messageContextMenuClicked
  case messageContextMenuClosed
  case userProfileClicked
  case myProfileClicked
  case loginClicked
  case reading
  case loadMoreRepliesClicked
  case hideMoreRepliesClicked
  case commentReadMoreClicked
  case commentReadLessClicked
  case appInit
  case appOpened
  case appClosed
  case sortByOpened
  case sortByClicked
  case createMessageClicked
  case commentPostClicked
  case createMessageSuccessfully
  case backClicked
  case loadMoreComments
  case engineStatus
  case communityGuidelinesLinkClicked
  case commentShareClicked
  case commentReportClicked
  case commentDeleteClicked
  case commentRankUpButtonClicked
  case commentRankDownButtonClicked
  case commentRankUpButtonUndo
  case commentRankDownButtonUndo
  case fullConversationAdCloseClicked
  case commentEdited
  case commentMuteClicked
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class OWBaseLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @available(*, unavailable, message: "Loading this view from a nib is unsupported in this project")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol OWLoggerConfiguration {
  var level: SpotImCore.OWLogLevel { get set }
  var methods: [SpotImCore.OWLogMethod] { get set }
}
public struct OWPreConversationSettings : SpotImCore.OWPreConversationSettingsProtocol {
  public let style: SpotImCore.OWPreConversationStyle
  public init(style: SpotImCore.OWPreConversationStyle = .regular())
}
public protocol OWCommentThreadSettingsProtocol {
  var conversationSettings: SpotImCore.OWConversationSettingsProtocol { get }
}
public protocol OWMonetization {
}
public typealias OWUserAuthenticationStatusCompletion = (Swift.Result<SpotImCore.OWUserAuthenticationStatus, SpotImCore.OWError>) -> Swift.Void
public typealias OWSpotId = Swift.String
public typealias OWPostId = Swift.String
public typealias OWCommentId = Swift.String
public enum OWPreConversationSummaryStyle {
  case none
  case regular
  case compact
  public static func == (a: SpotImCore.OWPreConversationSummaryStyle, b: SpotImCore.OWPreConversationSummaryStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct OWArticleSettings : SpotImCore.OWArticleSettingsProtocol {
  public let section: Swift.String
  public let showHeader: Swift.Bool
  public let readOnlyMode: SpotImCore.OWReadOnlyMode
  public init(section: Swift.String, showHeader: Swift.Bool = true, readOnlyMode: SpotImCore.OWReadOnlyMode = .default)
}
public protocol OWAnalytics {
}
public enum OWCommunityGuidelinesStyle : Swift.Codable {
  case none
  case regular
  case compact
  public static func == (a: SpotImCore.OWCommunityGuidelinesStyle, b: SpotImCore.OWCommunityGuidelinesStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public protocol OWPreConversationSettingsProtocol {
  var style: SpotImCore.OWPreConversationStyle { get }
}
public struct OWCommentCreationSettings : SpotImCore.OWCommentCreationSettingsProtocol {
  public let conversationSettings: SpotImCore.OWConversationSettingsProtocol
  public let style: SpotImCore.OWCommentCreationStyle
  public init(conversationSettings: SpotImCore.OWConversationSettingsProtocol, style: SpotImCore.OWCommentCreationStyle = .regular)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SPShowCommentsButton : SpotImCore.OWBaseButton {
  @_Concurrency.MainActor(unsafe) public func getCommentsCount() -> Swift.String?
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let spotIMConfigLoaded: Foundation.Notification.Name
}
public struct SPEventInfo : Swift.Codable {
  public let eventType: Swift.String
  public let source: Swift.String
  public let isRegistered: Swift.Bool
  public let splitName: Swift.String
  public let itemType: Swift.String?
  public let targetType: Swift.String?
  public let segment: Swift.String?
  public let lang: Swift.String?
  public let domain: Swift.String?
  public let userId: Swift.String?
  public let messageId: Swift.String?
  public let relatedMessageId: Swift.String?
  public let readingSeconds: Swift.Int?
  public let itemId: Swift.String?
  public let totalComments: Swift.Int?
  public let engineStatusType: Swift.String?
  public let publisherCustomData: [Swift.String : Swift.String]?
  public let targetUrl: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol OWSortingCustomizations {
  func setTitle(_ title: Swift.String, forOption sortOption: SpotImCore.OWSortOption)
  var initialOption: SpotImCore.OWInitialSortStrategy { get set }
}
public enum OWCommunityQuestionsStyle : Swift.Codable {
  case none
  case regular
  public static func == (a: SpotImCore.OWCommunityQuestionsStyle, b: SpotImCore.OWCommunityQuestionsStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public enum OWSortOption : Swift.String {
  case best
  case newest
  case oldest
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OWViewSourceType {
  case preConversation
  case conversation
  case commentCreation
  public static func == (a: SpotImCore.OWViewSourceType, b: SpotImCore.OWViewSourceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct OWConversationSettings : SpotImCore.OWConversationSettingsProtocol {
  public let selectedCommentId: Swift.String?
  public let style: SpotImCore.OWConversationStyle
  public init(style: SpotImCore.OWConversationStyle = .regular, selectedCommentId: Swift.String? = nil)
}
public enum OWConversationSpacing : Swift.Codable {
  public struct Metrics {
    public static let defaultSpaceBetweenComments: CoreFoundation.CGFloat
    public static let defaultSpaceBelowHeader: CoreFoundation.CGFloat
    public static let defaultSpaceBelowCommunityGuidelines: CoreFoundation.CGFloat
    public static let defaultSpaceBelowCommunityQuestions: CoreFoundation.CGFloat
    public static let maxSpace: CoreFoundation.CGFloat
    public static let minSpace: CoreFoundation.CGFloat
  }
  case regular
  case compact
  case custom(betweenComments: CoreFoundation.CGFloat, belowHeader: CoreFoundation.CGFloat, belowCommunityGuidelines: CoreFoundation.CGFloat, belowCommunityQuestions: CoreFoundation.CGFloat)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SpotImCore.OWPreConversationStyle : Swift.Equatable {
  public static func == (lhs: SpotImCore.OWPreConversationStyle, rhs: SpotImCore.OWPreConversationStyle) -> Swift.Bool
}
public enum OWSupportedLanguage : Swift.String, Swift.Codable, Swift.CaseIterable {
  case hebrew
  case english
  case arabic
  case spanish
  case portoguese
  case french
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SpotImCore.OWSupportedLanguage]
  public typealias RawValue = Swift.String
  public static var allCases: [SpotImCore.OWSupportedLanguage] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum OWViewActionCallbackType {
  case showMoreCommentsPressed
  case writeCommentPressed
  case articleHeaderPressed
  case communityGuidelinesPressed
  case communityQuestionsPressed
  case postCommentPressed
  case adClosed
  case adTapped
  public static func == (a: SpotImCore.OWViewActionCallbackType, b: SpotImCore.OWViewActionCallbackType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SpotImError : Swift.Error {
  case notInitialized
  case alreadyInitialized
  case configurationSdkDisabled
  case internalError(Swift.String)
}
public enum SpotImLoginStatus {
  case guest
  case ssoLoggedIn(userId: Swift.String)
}
public struct SpotImConversationCounters : Swift.Codable {
  public let comments: Swift.Int
  public let replies: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SpotImArticleMetadata {
  public init(url: Swift.String, title: Swift.String, subtitle: Swift.String, thumbnailUrl: Swift.String, section: Swift.String = "default", customBIData: [Swift.String : Swift.String]? = nil, readOnlyMode: SpotImCore.SpotImReadOnlyMode = .default)
  public mutating func setCustomBIData(_ data: [Swift.String : Swift.String])
  public mutating func setReadOnlymode(_ mode: SpotImCore.SpotImReadOnlyMode)
}
public enum SpotImSortByOption {
  case best
  case newest
  case oldest
  public static func == (a: SpotImCore.SpotImSortByOption, b: SpotImCore.SpotImSortByOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SpotImButtonOnlyMode {
  case disable
  case withTitle
  case withoutTitle
  public static func == (a: SpotImCore.SpotImButtonOnlyMode, b: SpotImCore.SpotImButtonOnlyMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SpotImReadOnlyMode {
  case `default`
  case enable
  case disable
  public static func == (a: SpotImCore.SpotImReadOnlyMode, b: SpotImCore.SpotImReadOnlyMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SPAnalyticsEventDelegate {
  func trackEvent(type: SpotImCore.SPEventType, event: SpotImCore.SPEventInfo)
}
public typealias InitizlizeCompletionHandler = (Swift.Result<Swift.Void, SpotImCore.SpotImError>) -> Swift.Void
@_hasMissingDesignatedInitializers public class SpotIm {
  public static var reinit: Swift.Bool
  public static var googleAdsProvider: SpotImCore.AdsProvider?
  public static var customFontFamily: Swift.String?
  public static var displayArticleHeader: Swift.Bool
  public static var reactNativeShowLoginScreenOnRootVC: Swift.Bool
  public static var enableCreateCommentNewDesign: Swift.Bool
  public static var shouldConversationFooterStartFromBottomAnchor: Swift.Bool
  public static var buttonOnlyMode: SpotImCore.SpotImButtonOnlyMode
  public static var enableCustomNavigationItemTitle: Swift.Bool
  public static let OVERRIDE_USER_INTERFACE_STYLE_NOTIFICATION: Swift.String
  public static func initialize(spotId: Swift.String, completion: SpotImCore.InitizlizeCompletionHandler? = nil)
  public static func setGoogleAdsProvider(googleAdsProvider: SpotImCore.AdsProvider)
  public static func sso(withJwtSecret secret: Swift.String, completion: @escaping SpotImCore.AuthStratCompleteionHandler)
  public static func startSSO(completion: @escaping SpotImCore.AuthStratCompleteionHandler)
  public static func completeSSO(with codeB: Swift.String, completion: @escaping SpotImCore.AuthCompletionHandler)
  public static func createSpotImFlowCoordinator(loginDelegate: SpotImCore.SpotImLoginDelegate, completion: @escaping ((Swift.Result<SpotImCore.SpotImSDKFlowCoordinator, SpotImCore.SpotImError>) -> Swift.Void))
  public static func getConversationCounters(conversationIds: [Swift.String], completion: @escaping ((Swift.Result<[Swift.String : SpotImCore.SpotImConversationCounters], SpotImCore.SpotImError>) -> Swift.Void))
  public static var darkModeBackgroundColor: UIKit.UIColor {
    get
    set
  }
  public static var overrideUserInterfaceStyle: SpotImCore.SPUserInterfaceStyle? {
    get
    set
  }
  public static func getUserLoginStatus(completion: @escaping ((Swift.Result<SpotImCore.SpotImLoginStatus, SpotImCore.SpotImError>) -> Swift.Void))
  public static func logout(completion: @escaping ((Swift.Result<Swift.Void, SpotImCore.SpotImError>) -> Swift.Void))
  public static func setCustomSortByOptionText(option: SpotImCore.SpotImSortByOption, text: Swift.String)
  public static func setAnalyticsEventDelegate(delegate: SpotImCore.SPAnalyticsEventDelegate)
  public static func setButtonOnlyMode(mode: SpotImCore.SpotImButtonOnlyMode)
  public static func getButtonOnlyMode() -> SpotImCore.SpotImButtonOnlyMode
  public static func setInitialSort(option: SpotImCore.SpotImSortByOption)
  public static func configureLogger(logLevel: SpotImCore.SPLogLevel, logMethods: [SpotImCore.SPLogMethod])
  public static func setAdditionalConfigurations(configurations: [SpotImCore.SPAdditionalConfiguration])
  @objc deinit
}
public enum OWLogLevel {
  case none, error, medium, verbose
  public static func == (a: SpotImCore.OWLogLevel, b: SpotImCore.OWLogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OWLogMethod {
  case nsLog, osLog, file(maxFilesNumber: Swift.Int)
}
extension SpotImCore.OWLogMethod : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SpotImCore.OWLogMethod, b: SpotImCore.OWLogMethod) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias AuthCompletionHandler = (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void
public typealias AuthStratCompleteionHandler = (Swift.Result<SpotImCore.SSOStartResponse, Swift.Error>) -> Swift.Void
public struct SSOStartResponse : Swift.Codable {
  public var codeA: Swift.String?
  public var jwtToken: Swift.String?
  public var autoComplete: Swift.Bool
  public var success: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias JSON = [Swift.String : Any]
public enum OWParserError : Swift.Error {
  case keyNotFound
  public static func == (a: SpotImCore.OWParserError, b: SpotImCore.OWParserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OWSSOFlowType {
  case start(completion: SpotImCore.OWSSOStartHandler)
  case complete(codeB: Swift.String, completion: SpotImCore.OWSSOCompletionHandler)
  case usingProvider(privder: SpotImCore.OWSSOProvider, token: Swift.String, completion: SpotImCore.OWProviderSSOHandler)
}
public typealias OWSSOCompletionHandler = (Swift.Result<SpotImCore.OWSSOCompletionModel, SpotImCore.OWError>) -> Swift.Void
public protocol SpotImLayoutDelegate : AnyObject {
  func viewHeightDidChange(to newValue: CoreFoundation.CGFloat)
}
public protocol AuthenticationViewDelegate : AnyObject {
  func authenticationStarted()
}
public protocol SpotImLoginDelegate : AnyObject {
  func startLoginUIFlow(navigationController: UIKit.UINavigationController)
  func renewSSOAuthentication(userId: Swift.String)
  func shouldDisplayLoginPromptForGuests() -> Swift.Bool
}
public enum CustomizableView {
  case loginPrompt(textView: UIKit.UITextView)
  case communityQuestion(textView: UIKit.UITextView)
  case sayControl(labelContainer: UIKit.UIView, label: UIKit.UILabel)
  case footer(view: UIKit.UIView)
  case communityGuidelines(textView: UIKit.UITextView)
  case navigationItemTitle(label: UIKit.UILabel)
  case showCommentsButton(button: SpotImCore.SPShowCommentsButton)
  case header(titleLabel: UIKit.UILabel, counterLabel: UIKit.UILabel)
  case commentCreationActionButton(button: SpotImCore.OWBaseButton)
  case readOnlyLabel(label: UIKit.UILabel)
  case emptyStateReadOnlyLabel(label: UIKit.UILabel)
}
public protocol SpotImCustomUIDelegate : AnyObject {
  func customizeView(view: SpotImCore.CustomizableView, isDarkMode: Swift.Bool, source: SpotImCore.SPViewSourceType?, postId: Swift.String)
}
public typealias SPShowFullConversationCompletionHandler = (_ success: Swift.Bool, _ error: SpotImCore.SpotImError?) -> Swift.Void
public typealias SPOpenNewCommentCompletionHandler = (_ success: Swift.Bool, _ error: SpotImCore.SpotImError?) -> Swift.Void
public enum SPViewControllerPresentationalMode {
  case present(viewController: UIKit.UIViewController)
  case push(navigationController: UIKit.UINavigationController)
}
extension SpotImCore.SpotImLoginDelegate {
  public func startLoginUIFlow(navigationController: UIKit.UINavigationController)
  public func renewSSOAuthentication(userId: Swift.String)
  public func shouldDisplayLoginPromptForGuests() -> Swift.Bool
}
public let SPOTIM_NAV_CONTROL_TAG: Swift.Int
@_hasMissingDesignatedInitializers final public class SpotImSDKFlowCoordinator {
  final public func setLayoutDelegate(delegate: SpotImCore.SpotImLayoutDelegate)
  final public func setCustomUIDelegate(delegate: SpotImCore.SpotImCustomUIDelegate)
  final public func preConversationController(withPostId postId: Swift.String, articleMetadata: SpotImCore.SpotImArticleMetadata, numberOfPreLoadedMessages: Swift.Int = 2, navigationController: UIKit.UINavigationController, callbacks: SpotImCore.SPViewActionsCallbacks? = nil, completion: @escaping (UIKit.UIViewController) -> Swift.Void)
  final public func openFullConversationViewController(postId: Swift.String, articleMetadata: SpotImCore.SpotImArticleMetadata, presentationalMode: SpotImCore.SPViewControllerPresentationalMode, selectedCommentId: Swift.String? = nil, callbacks: SpotImCore.SPViewActionsCallbacks? = nil, completion: SpotImCore.SPShowFullConversationCompletionHandler? = nil)
  final public func openNewCommentViewController(postId: Swift.String, articleMetadata: SpotImCore.SpotImArticleMetadata, fullConversationPresentationalMode: SpotImCore.SPViewControllerPresentationalMode, callbacks: SpotImCore.SPViewActionsCallbacks? = nil, completion: SpotImCore.SPOpenNewCommentCompletionHandler? = nil)
  @objc deinit
}
public typealias OWCustomizableElementCallback = (SpotImCore.OWCustomizableElement, SpotImCore.OWViewSourceType, SpotImCore.OWThemeStyle, Swift.String?) -> Swift.Void
public enum OWCustomizableElement {
}
public enum OWSSOProvider {
  case gigya
  case piano
  case auth0
  public static func == (a: SpotImCore.OWSSOProvider, b: SpotImCore.OWSSOProvider) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct OWSSOProviderModel {
  public let userId: Swift.String
}
public protocol OWManagerProtocol {
  var spotId: SpotImCore.OWSpotId { get set }
  var ui: SpotImCore.OWUI { get }
  var analytics: SpotImCore.OWAnalytics { get }
  var monetization: SpotImCore.OWMonetization { get }
  var authentication: SpotImCore.OWAuthentication { get }
  var helpers: SpotImCore.OWHelpers { get }
}
public protocol OWUIFlows {
  func preConversation(postId: SpotImCore.OWPostId, article: SpotImCore.OWArticleProtocol, presentationalMode: SpotImCore.OWPresentationalMode, additionalSettings: SpotImCore.OWPreConversationSettingsProtocol?, callbacks: SpotImCore.OWViewActionsCallbacks?, completion: @escaping SpotImCore.OWViewCompletion)
  func conversation(postId: SpotImCore.OWPostId, article: SpotImCore.OWArticleProtocol, presentationalMode: SpotImCore.OWPresentationalMode, additionalSettings: SpotImCore.OWConversationSettingsProtocol?, callbacks: SpotImCore.OWViewActionsCallbacks?, completion: @escaping SpotImCore.OWDefaultCompletion)
  func commentCreation(postId: SpotImCore.OWPostId, article: SpotImCore.OWArticleProtocol, presentationalMode: SpotImCore.OWPresentationalMode, additionalSettings: SpotImCore.OWCommentCreationSettingsProtocol?, callbacks: SpotImCore.OWViewActionsCallbacks?, completion: @escaping SpotImCore.OWDefaultCompletion)
  func commentThread(postId: SpotImCore.OWPostId, article: SpotImCore.OWArticleProtocol, commentId: SpotImCore.OWCommentId, presentationalMode: SpotImCore.OWPresentationalMode, additionalSettings: SpotImCore.OWCommentThreadSettingsProtocol?, callbacks: SpotImCore.OWViewActionsCallbacks?, completion: @escaping SpotImCore.OWDefaultCompletion)
}
public enum OWPreConversationStyle : Swift.Codable {
  public struct Metrics {
    public static let defaultRegularNumberOfComments: Swift.Int
    public static let minNumberOfComments: Swift.Int
    public static let maxNumberOfComments: Swift.Int
  }
  case regular(numberOfComments: Swift.Int = Metrics.defaultRegularNumberOfComments)
  case compact
  case ctaButtonOnly
  case ctaWithSummary
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias OWViewCompletion = (Swift.Result<UIKit.UIView, SpotImCore.OWError>) -> Swift.Void
public enum OWAdditionalConfiguration {
  case suppressFinmbFilter
  public static func == (a: SpotImCore.OWAdditionalConfiguration, b: SpotImCore.OWAdditionalConfiguration) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol OWCustomizations {
  var fontFamily: SpotImCore.OWFontGroupFamily { get set }
  var sorting: SpotImCore.OWSortingCustomizations { get }
  var themeEnforcement: SpotImCore.OWThemeStyleEnforcement { get set }
  func addElementCallback(_ callback: @escaping SpotImCore.OWCustomizableElementCallback)
}
public struct OWSSOStartModel {
  public let codeA: Swift.String
}
public enum OWError : Swift.Error {
  case missingSpotId
  case castingError(description: Swift.String)
  case preConversationFlow
  case conversationFlow
  case commentCreationFlow
  case commentThreadFlow
  case preConversationView
  case conversationView
  case commentCreationView
  case commentThreadView
  case logout
  case userStatus
  case ssoStart
  case ssoComplete
  case alreadyLoggedIn
  case missingImplementation
  public var description: Swift.String {
    get
  }
}
public protocol OWHelpers {
  func conversationCounters(forPostIds postIds: [SpotImCore.OWPostId], completion: (Swift.Result<[SpotImCore.OWPostId : SpotImCore.OWConversationCounter], SpotImCore.OWError>) -> Swift.Void)
  var additionalConfigurations: [SpotImCore.OWAdditionalConfiguration] { get set }
  var loggerConfiguration: SpotImCore.OWLoggerConfiguration { get }
  var languageStrategy: SpotImCore.OWLanguageStrategy { get set }
  var localeStrategy: SpotImCore.OWLocaleStrategy { get set }
}
public protocol OWCommentCreationSettingsProtocol {
  var conversationSettings: SpotImCore.OWConversationSettingsProtocol { get }
  var style: SpotImCore.OWCommentCreationStyle { get }
}
public enum OWLanguageStrategy : Swift.Codable {
  case useDevice
  case useServerConfig
  case use(language: SpotImCore.OWSupportedLanguage)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol OWUIAuthentication {
  var displayAuthenticationFlow: SpotImCore.OWAuthenticationFlowCallback? { get set }
}
public enum SPLogMethod {
  case nsLog, osLog, file(maxFilesNumber: Swift.Int)
}
public enum OWRouteringMode {
  case none
  case flow(navigationController: UIKit.UINavigationController)
}
public typealias OWRenewSSOCallback = (Swift.String, @escaping SpotImCore.OWBasicCompletion) -> Swift.Void
public enum OWCommentCreationStyle {
  case regular
  case light
  case floatingKeyboard
  public static func == (a: SpotImCore.OWCommentCreationStyle, b: SpotImCore.OWCommentCreationStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol OWConversationSettingsProtocol {
  var selectedCommentId: Swift.String? { get }
  var style: SpotImCore.OWConversationStyle { get }
}
public struct OWCommentCreationSettingsBuilder : SpotImCore.OWCommentCreationSettingsProtocol {
  public var conversationSettings: SpotImCore.OWConversationSettingsProtocol
  public var style: SpotImCore.OWCommentCreationStyle
  public init(conversationSettings: SpotImCore.OWConversationSettingsProtocol, style: SpotImCore.OWCommentCreationStyle = .regular)
  @discardableResult
  public mutating func conversationSettings(_ settings: SpotImCore.OWConversationSettingsProtocol) -> SpotImCore.OWCommentCreationSettingsProtocol
  @discardableResult
  public mutating func style(_ style: SpotImCore.OWCommentCreationStyle) -> SpotImCore.OWCommentCreationSettingsProtocol
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class OWBaseButton : UIKit.UIButton {
  @available(*, unavailable, message: "Loading this view from a nib is unsupported in this project")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public typealias OWSSOStartHandler = (Swift.Result<SpotImCore.OWSSOStartModel, SpotImCore.OWError>) -> Swift.Void
public enum OWFontGroupFamily : Swift.Codable {
  case `default`
  case custom(fontFamily: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum OWThemeStyleEnforcement {
  case none
  case theme(_: SpotImCore.OWThemeStyle)
  public static func == (lhs: SpotImCore.OWThemeStyleEnforcement, rhs: SpotImCore.OWThemeStyleEnforcement) -> Swift.Bool
}
public enum OWModalPresentationStyle {
  case fullScreen
  case pageSheet
  public static func == (a: SpotImCore.OWModalPresentationStyle, b: SpotImCore.OWModalPresentationStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct OWSSOCompletionModel {
  public let userId: Swift.String
}
public protocol OWArticleSettingsProtocol {
  var section: Swift.String { get }
  var showHeader: Swift.Bool { get }
  var readOnlyMode: SpotImCore.OWReadOnlyMode { get }
}
public enum OWUserAuthenticationStatus {
  case notAutenticated
  case guest
  case ssoLoggedIn(userId: Swift.String)
}
public typealias OWConversationCountersCompletion = (Swift.Result<[SpotImCore.OWPostId : SpotImCore.OWConversationCounter], SpotImCore.OWError>) -> Swift.Void
public protocol OWAuthentication {
  func sso(_ flowType: SpotImCore.OWSSOFlowType)
  func userStatus(completion: @escaping SpotImCore.OWUserAuthenticationStatusCompletion)
  func logout(completion: @escaping SpotImCore.OWDefaultCompletion)
  var renewSSO: SpotImCore.OWRenewSSOCallback? { get set }
  var shouldDisplayLoginPrompt: Swift.Bool { get set }
}
extension SpotImCore.OWLanguageStrategy : Swift.Equatable {
  public static func == (lhs: SpotImCore.OWLanguageStrategy, rhs: SpotImCore.OWLanguageStrategy) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class SPClientSettings {
  public static let main: SpotImCore.SPClientSettings
  @objc public func appMovedToForeground(notification: Foundation.Notification)
  @objc deinit
}
public enum SPUserInterfaceStyle : Swift.Int {
  case light
  case dark
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SPLogLevel {
  case none, error, medium, verbose
  public static func == (a: SpotImCore.SPLogLevel, b: SpotImCore.SPLogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct OWArticle : SpotImCore.OWArticleProtocol {
  public let url: Foundation.URL
  public let title: Swift.String
  public let subtitle: Swift.String?
  public let thumbnailUrl: Foundation.URL?
  public let additionalSettings: SpotImCore.OWArticleSettingsProtocol
  public init(url: Foundation.URL, title: Swift.String, subtitle: Swift.String? = nil, thumbnailUrl: Foundation.URL? = nil, additionalSettings: SpotImCore.OWArticleSettingsProtocol)
}
public protocol OWArticleProtocol {
  var url: Foundation.URL { get }
  var title: Swift.String { get }
  var subtitle: Swift.String? { get }
  var thumbnailUrl: Foundation.URL? { get }
  var additionalSettings: SpotImCore.OWArticleSettingsProtocol { get }
}
public enum OWPresentationalMode {
  case present(viewController: UIKit.UIViewController, style: SpotImCore.OWModalPresentationStyle = .pageSheet)
  case push(navigationController: UIKit.UINavigationController)
}
public enum SPAdditionalConfiguration {
  case suppressFinmbFilter
  public static func == (a: SpotImCore.SPAdditionalConfiguration, b: SpotImCore.SPAdditionalConfiguration) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias OWBasicCompletion = () -> Swift.Void
public struct OWPreConversationSettingsBuilder : SpotImCore.OWPreConversationSettingsProtocol {
  public var style: SpotImCore.OWPreConversationStyle
  public init(style: SpotImCore.OWPreConversationStyle = .regular())
  @discardableResult
  public mutating func style(_ style: SpotImCore.OWPreConversationStyle) -> SpotImCore.OWPreConversationSettingsBuilder
}
public typealias SPViewActionsCallbacks = (SpotImCore.SPViewActionCallbackType, SpotImCore.SPViewSourceType, Swift.String) -> Swift.Void
public enum SPViewSourceType {
  case preConversation
  case conversation
  case createComment
  case login
  public var description: Swift.String {
    get
  }
  public static func == (a: SpotImCore.SPViewSourceType, b: SpotImCore.SPViewSourceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SPViewActionCallbackType {
  case articleHeaderPressed
  case openUserProfile(userId: Swift.String, navigationController: UIKit.UINavigationController)
}
@_hasMissingDesignatedInitializers public class OpenWeb {
  public static let manager: SpotImCore.OWManagerProtocol
  @objc deinit
}
public enum OWResult<T> {
  case success(T)
  case failure(Swift.Error)
  public var value: T? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
extension SpotImCore.OWResult {
  @discardableResult
  public func map<U>(_ function: (T) -> U) -> SpotImCore.OWResult<U>
  @discardableResult
  public func map<U>(_ function: () -> U) -> SpotImCore.OWResult<U>
  @discardableResult
  public func next<U>(_ function: (T) -> SpotImCore.OWResult<U>) -> SpotImCore.OWResult<U>
  @discardableResult
  public func next<U>(_ function: () -> SpotImCore.OWResult<U>) -> SpotImCore.OWResult<U>
  @discardableResult
  public func onError(_ function: (Swift.Error) -> Swift.Error) -> SpotImCore.OWResult<T>
  @discardableResult
  public func require() -> T
}
public protocol AdsProviderBannerDelegate : AnyObject {
  func bannerLoaded(bannerView: UIKit.UIView, adBannerSize: CoreFoundation.CGSize, adUnitID: Swift.String)
  func bannerFailedToLoad(error: Swift.Error)
}
public protocol AdsProviderInterstitialDelegate : AnyObject {
  func interstitialLoaded()
  func interstitialWillBeShown()
  func interstitialDidDismiss()
  func interstitialFailedToLoad(error: Swift.Error)
}
public enum AdSize {
  case small
  case medium
  case large
  public static func == (a: SpotImCore.AdSize, b: SpotImCore.AdSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AdsProvider : AnyObject {
  func version() -> Swift.String
  func setSpotId(spotId: Swift.String)
  func setupAdsBanner(with adId: Swift.String, in controller: UIKit.UIViewController, validSizes: Swift.Set<SpotImCore.AdSize>)
  func setupInterstitial(with adId: Swift.String)
  func showInterstitial(in controller: UIKit.UIViewController) -> Swift.Bool
  var bannerDelegate: SpotImCore.AdsProviderBannerDelegate? { get set }
  var interstitialDelegate: SpotImCore.AdsProviderInterstitialDelegate? { get set }
}
extension SpotImCore.OWThemeStyle : Swift.Equatable {}
extension SpotImCore.OWThemeStyle : Swift.Hashable {}
extension SpotImCore.OWModalPresentationStyle : Swift.Equatable {}
extension SpotImCore.OWModalPresentationStyle : Swift.Hashable {}
extension SpotImCore.OWReadOnlyMode : Swift.Equatable {}
extension SpotImCore.OWReadOnlyMode : Swift.Hashable {}
extension SpotImCore.SPEventType : Swift.Equatable {}
extension SpotImCore.SPEventType : Swift.Hashable {}
extension SpotImCore.SPEventType : Swift.RawRepresentable {}
extension SpotImCore.OWSortOption : Swift.Equatable {}
extension SpotImCore.OWSortOption : Swift.Hashable {}
extension SpotImCore.OWSortOption : Swift.RawRepresentable {}
extension SpotImCore.OWPreConversationSummaryStyle : Swift.Equatable {}
extension SpotImCore.OWPreConversationSummaryStyle : Swift.Hashable {}
extension SpotImCore.OWSupportedLanguage : Swift.Equatable {}
extension SpotImCore.OWSupportedLanguage : Swift.Hashable {}
extension SpotImCore.OWSupportedLanguage : Swift.RawRepresentable {}
extension SpotImCore.OWCommunityGuidelinesStyle : Swift.Equatable {}
extension SpotImCore.OWCommunityGuidelinesStyle : Swift.Hashable {}
extension SpotImCore.OWCommunityQuestionsStyle : Swift.Equatable {}
extension SpotImCore.OWCommunityQuestionsStyle : Swift.Hashable {}
extension SpotImCore.OWViewSourceType : Swift.Equatable {}
extension SpotImCore.OWViewSourceType : Swift.Hashable {}
extension SpotImCore.OWViewActionCallbackType : Swift.Equatable {}
extension SpotImCore.OWViewActionCallbackType : Swift.Hashable {}
extension SpotImCore.SpotImSortByOption : Swift.Equatable {}
extension SpotImCore.SpotImSortByOption : Swift.Hashable {}
extension SpotImCore.SpotImButtonOnlyMode : Swift.Equatable {}
extension SpotImCore.SpotImButtonOnlyMode : Swift.Hashable {}
extension SpotImCore.SpotImReadOnlyMode : Swift.Equatable {}
extension SpotImCore.SpotImReadOnlyMode : Swift.Hashable {}
extension SpotImCore.OWLogLevel : Swift.Equatable {}
extension SpotImCore.OWLogLevel : Swift.Hashable {}
extension SpotImCore.OWParserError : Swift.Equatable {}
extension SpotImCore.OWParserError : Swift.Hashable {}
extension SpotImCore.OWSSOProvider : Swift.Equatable {}
extension SpotImCore.OWSSOProvider : Swift.Hashable {}
extension SpotImCore.OWAdditionalConfiguration : Swift.Equatable {}
extension SpotImCore.OWAdditionalConfiguration : Swift.Hashable {}
extension SpotImCore.OWCommentCreationStyle : Swift.Equatable {}
extension SpotImCore.OWCommentCreationStyle : Swift.Hashable {}
extension SpotImCore.SPUserInterfaceStyle : Swift.Equatable {}
extension SpotImCore.SPUserInterfaceStyle : Swift.Hashable {}
extension SpotImCore.SPUserInterfaceStyle : Swift.RawRepresentable {}
extension SpotImCore.SPLogLevel : Swift.Equatable {}
extension SpotImCore.SPLogLevel : Swift.Hashable {}
extension SpotImCore.SPAdditionalConfiguration : Swift.Equatable {}
extension SpotImCore.SPAdditionalConfiguration : Swift.Hashable {}
extension SpotImCore.SPViewSourceType : Swift.Equatable {}
extension SpotImCore.SPViewSourceType : Swift.Hashable {}
extension SpotImCore.AdSize : Swift.Equatable {}
extension SpotImCore.AdSize : Swift.Hashable {}
